// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0--rc2
// source: proto/rpc_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	UnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (ClientService_ClientStreamRPCClient, error)
	ServerStreamRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (ClientService_ServerStreamRPCClient, error)
	BidirectionalRPC(ctx context.Context, opts ...grpc.CallOption) (ClientService_BidirectionalRPCClient, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) UnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/client_stream.ClientService/UnaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (ClientService_ClientStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], "/client_stream.ClientService/ClientStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceClientStreamRPCClient{stream}
	return x, nil
}

type ClientService_ClientStreamRPCClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type clientServiceClientStreamRPCClient struct {
	grpc.ClientStream
}

func (x *clientServiceClientStreamRPCClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceClientStreamRPCClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientServiceClient) ServerStreamRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (ClientService_ServerStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[1], "/client_stream.ClientService/ServerStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceServerStreamRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientService_ServerStreamRPCClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type clientServiceServerStreamRPCClient struct {
	grpc.ClientStream
}

func (x *clientServiceServerStreamRPCClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientServiceClient) BidirectionalRPC(ctx context.Context, opts ...grpc.CallOption) (ClientService_BidirectionalRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[2], "/client_stream.ClientService/BidirectionalRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceBidirectionalRPCClient{stream}
	return x, nil
}

type ClientService_BidirectionalRPCClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type clientServiceBidirectionalRPCClient struct {
	grpc.ClientStream
}

func (x *clientServiceBidirectionalRPCClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceBidirectionalRPCClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	UnaryRPC(context.Context, *Request) (*Response, error)
	ClientStreamRPC(ClientService_ClientStreamRPCServer) error
	ServerStreamRPC(*Request, ClientService_ServerStreamRPCServer) error
	BidirectionalRPC(ClientService_BidirectionalRPCServer) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) UnaryRPC(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPC not implemented")
}
func (UnimplementedClientServiceServer) ClientStreamRPC(ClientService_ClientStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRPC not implemented")
}
func (UnimplementedClientServiceServer) ServerStreamRPC(*Request, ClientService_ServerStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamRPC not implemented")
}
func (UnimplementedClientServiceServer) BidirectionalRPC(ClientService_BidirectionalRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalRPC not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_stream.ClientService/UnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UnaryRPC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).ClientStreamRPC(&clientServiceClientStreamRPCServer{stream})
}

type ClientService_ClientStreamRPCServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientServiceClientStreamRPCServer struct {
	grpc.ServerStream
}

func (x *clientServiceClientStreamRPCServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceClientStreamRPCServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClientService_ServerStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServiceServer).ServerStreamRPC(m, &clientServiceServerStreamRPCServer{stream})
}

type ClientService_ServerStreamRPCServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type clientServiceServerStreamRPCServer struct {
	grpc.ServerStream
}

func (x *clientServiceServerStreamRPCServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientService_BidirectionalRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).BidirectionalRPC(&clientServiceBidirectionalRPCServer{stream})
}

type ClientService_BidirectionalRPCServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type clientServiceBidirectionalRPCServer struct {
	grpc.ServerStream
}

func (x *clientServiceBidirectionalRPCServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceBidirectionalRPCServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_stream.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRPC",
			Handler:    _ClientService_UnaryRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamRPC",
			Handler:       _ClientService_ClientStreamRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamRPC",
			Handler:       _ClientService_ServerStreamRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalRPC",
			Handler:       _ClientService_BidirectionalRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rpc_service.proto",
}
